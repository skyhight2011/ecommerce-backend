services:
  # NestJS Application - Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ecommerce-backend-prod
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database - Production
  postgres:
    image: postgres:18-alpine
    container_name: ecommerce-postgres-prod
    environment:
      - POSTGRES_DB=ecommerce_prod
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=ecommerce_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
