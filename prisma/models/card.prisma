// Payment Models - Comprehensive payment management
model Payment {
  id          String   @id @default(cuid())
  orderId     String
  
  // Payment details
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  method      PaymentMethodType
  status      PaymentStatus @default(PENDING)
  
  // External payment provider data
  provider    String?  // stripe, paypal, etc.
  providerId  String?  // External payment ID
  providerData Json?   // Additional provider-specific data
  
  // Transaction details
  transactionId String?
  gatewayResponse Json? // Raw gateway response
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  processedAt DateTime?
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
  WALLET
  CRYPTOCURRENCY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Payment Methods (saved payment methods)
model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  
  // Payment method details
  type      PaymentMethodType
  provider  String   // stripe, paypal, etc.
  providerId String  // External payment method ID
  
  // Card details (for cards)
  last4     String?  // Last 4 digits
  brand    String?  // visa, mastercard, etc.
  expMonth Int?
  expYear  Int?
  
  // Billing address
  billingAddressId String?
  
  // Status
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingAddress Address? @relation(fields: [billingAddressId], references: [id])
  
  @@map("payment_methods")
}

// Refunds
model Refund {
  id        String   @id @default(cuid())
  orderId   String
  
  // Refund details
  amount    Decimal  @db.Decimal(10, 2)
  reason    String?
  status    RefundStatus @default(PENDING)
  
  // External refund data
  providerId String?  // External refund ID
  providerData Json? // Provider-specific data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  processedAt DateTime?
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("refunds")
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  // Review content
  rating    Int      // 1-5 stars
  title     String?
  content   String?
  
  // Review status
  status    ReviewStatus @default(PENDING)
  isVerified Boolean @default(false) // Verified purchase
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  HIDDEN
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  
  // Notification content
  type      NotificationType
  title     String
  message   String
  data      Json?    // Additional notification data
  
  // Status
  isRead    Boolean  @default(false)
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  readAt    DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SHIPMENT_UPDATE
  REVIEW_REQUEST
  PROMOTION
  SYSTEM
  SECURITY
}

// Coupons and Discounts
model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  
  // Discount details
  type        DiscountType
  value       Decimal  @db.Decimal(10, 2)
  minOrderAmount Decimal? @db.Decimal(10, 2)
  maxDiscountAmount Decimal? @db.Decimal(10, 2)
  
  // Usage limits
  usageLimit  Int?
  usedCount   Int      @default(0)
  usageLimitPerUser Int? @default(1)
  
  // Validity
  isActive    Boolean  @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  usages CouponUsage[]
  
  @@map("coupons")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Coupon Usage Tracking
model CouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  userId    String?
  orderId   String?
  
  // Usage details
  discountAmount Decimal @db.Decimal(10, 2)
  
  // Timestamps
  usedAt DateTime @default(now())
  
  // Relations
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  
  @@map("coupon_usages")
}
