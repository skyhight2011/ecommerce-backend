services:
  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ecommerce-backend-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@postgres:5432/ecommerce_dev
      - JWT_SECRET=your-secret-key-change-in-production
      - JWT_EXPIRES_IN=1d
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./nest-cli.json:/app/nest-cli.json
      # Exclude node_modules to use container's dependencies
      - /app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for future use)
  postgres:
    image: postgres:18-alpine
    container_name: ecommerce-postgres-dev
    environment:
      - POSTGRES_DB=ecommerce_dev
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=ecommerce_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (for future use)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
